apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkownerinfoonhelmreleases
spec:
  crd:
    spec:
      names:
        kind: GkOwnerInfoOnHelmReleases
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            helmManifestParserURL:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package ownerinfoonhelmreleases

        iro := input.review.object
        parser_url := sprintf("%s/v3", [input.parameters.helmManifestParserURL])
        parser_resp := http.send({"url": parser_url, "method": "POST", "raise_error": false, "raw_body": iro.data.release, "timeout": "15s"})

        violation[{"msg": msg}] {
          parser_resp.status_code != 200
          msg := "helm-manifest-parser did not return HTTP status 200. Please retry in ~5 minutes."
        }

        configmaps[obj] {
          iro.kind == "Secret"
          iro.type == "helm.sh/release.v1"
          iro.metadata.labels.status == "deployed"

          parser_resp.status_code == 200

          obj := parser_resp.body.items[_]
          obj.kind == "ConfigMap"
          startswith(obj.metadata.name, "owner-of-")
        }

        violation[{"msg": msg}] {
          # Check if an 'owner-of-<release-name>' ConfigMap exists for this release.
          count(configmaps) == 0
          owner_info := object.get(parser_resp.body, ["values", "owner-info"], {})
          release_name := iro.metadata.labels.name
          msg := sprintf(
            "support-group=%s,service=%s: could not find ConfigMap: owner-of-%s",
            [object.get(owner_info, "support-group", "none"), object.get(owner_info, "service", "none"), release_name]
          )
        }

        violation[{"msg": msg}] {
          count(configmaps) > 0

          # Check if 'primary-maintainer' label is defined. Existence of this label denotes that
          # the 'data.maintainers' field is defined and it contains at least one maintainer.
          obj := configmaps[_]
          pm := object.get(obj.metadata, ["labels", "primary-maintainer"], "")
          pm == ""

          owner_info := object.get(parser_resp.body, ["values", "owner-info"], {})
          msg := sprintf(
            "support-group=%s,service=%s: ConfigMap %q does not have %q label: parent chart needs to define %q in its Values.yaml file with at least one maintainer",
            [object.get(owner_info, "support-group", "none"), object.get(owner_info, "service", "none"), obj.metadata.name, "primary-maintainer", "owner-info.maintainers"],
          )
        }
