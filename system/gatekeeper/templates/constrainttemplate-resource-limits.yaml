apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkresourcelimits
spec:
  crd:
    spec:
      names:
        kind: GkResourceLimits

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package resourcelimits

        iro := input.review.object
        iro_support_group := object.get(iro, ["metadata", "labels", "cc/support-group"], "none")
        iro_service := object.get(iro, ["metadata", "labels", "cc/service"], "none")

        # We have such a bafflingly large amount of violations that
        # Gatekeeper cannot report them all at once. I'd rather have
        # *something* reported for as many things as possible, even if it
        # means sacrificing accuracy, so we report only one violation for
        # each offending pod, and we report on the deployment/daemonset level
        # if possible to avoid useless duplication of violations.

        resource_types = {"cpu", "memory"}

        missing_limits_on_pod[{"container": container.name, "type": resource_type}] {
          container := iro.spec.containers[_]
          limits := object.get(container, ["resources", "limits"], {})
          resource_type := resource_types[_]
          object.get(limits, resource_type, "") == ""
        }

        missing_limits_on_pod_template[{"container": container.name, "type": resource_type}] {
          container := iro.spec.template.spec.containers[_]
          limits := object.get(container, ["resources", "limits"], {})
          resource_type := resource_types[_]
          object.get(limits, resource_type, "") == ""
        }

        pod_owners = {"ReplicaSet", "DaemonSet", "StatefulSet"}

        pod_belongs_to[kind] {
          ref := iro.metadata.ownerReferences[_]
          kind := ref.kind
          kind == pod_owners[_]
        }

        violation[{"msg": msg}] {
          iro.kind == "Pod"
          count(pod_belongs_to) == 0 # otherwise the violation will be reported on the DaemonSet or Deployment
          count(missing_limits_on_pod) > 0
          msg := sprintf(
            "support-group=%s,service=%s: cpu and memory limits not set on some or all containers",
            [iro_support_group, iro_service]
          )
        }

        violation_owners = {"Deployment", "DaemonSet", "StatefulSet"}

        violation[{"msg": msg}] {
          iro.kind == violation_owners[_]
          count(missing_limits_on_pod_template) > 0
          msg := sprintf(
            "support-group=%s,service=%s: cpu and memory limits not set on some or all containers",
            [iro_support_group, iro_service]
          )
        }
