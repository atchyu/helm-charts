##############################################################################
# WARNING: This policy is a vital piece of the garbage collection process in #
# our internal Keppel repositories. Since this policy regularly polls every  #
# image that is used by live containers, we can rely on the "last_pulled_at" #
# timestamps of images in active use to never get too old for GC to kick in. #
##############################################################################

apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkvulnerableimages
spec:
  crd:
    spec:
      names:
        kind: GkVulnerableImages
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            doopImageCheckerURL:
              type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerableimages

        iro := input.review.object
        iro_support_group := object.get(iro, ["metadata", "labels", "cc/support-group"], "none")
        iro_service := object.get(iro, ["metadata", "labels", "cc/service"], "none")

        checks[{ "container": container, "response": resp }] {
          iro.kind == "Pod"
          container := iro.status.containerStatuses[_]

          # only consider images stored in Keppel since we want to inspect the X-Keppel-Vulnerability-Status header
          regex.match("^keppel", container.image)

          # query vulnerability status through helper API
          imgID := trim_prefix(container.imageID, "docker-pullable://")
          url := sprintf("%s/v1/headers?image=%s", [input.parameters.doopImageCheckerURL, imgID])
          resp := http.send({"url": url, "method": "GET", "raise_error": false, "timeout": "10s"})
        }

        violation[{"msg": msg}] {
          check := checks[_]
          check.response.status_code != 200

          msg := "doop-image-parser did not return HTTP status 200. Please retry in ~5 minutes."
        }

        violation[{"msg": msg}] {
          check := checks[_]
          check.response.status_code == 200
          status := trim_space(object.get(check.response.body, "X-Keppel-Vulnerability-Status", "Unclear"))

          # report everything with a definite vulnerability
          status != "Clean"
          status != "Unknown"
          msg := sprintf(
            "support-group=%s,service=%s: image %s for container %q has vulnerability status %q",
            [iro_support_group, iro_service, check.container.image, check.container.name, status]
          )
        }
