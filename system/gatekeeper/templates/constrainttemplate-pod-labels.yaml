apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkpodlabels
spec:
  crd:
    spec:
      names:
        kind: GkPodLabels
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            known_support_groups:
              type: array
              items:
                type: string

  targets:
    - target: admission.k8s.gatekeeper.sh
      libs:
        - |
          {{ .Files.Get "lib/add-support-labels.rego" | nindent 10 }}
        - |
          {{ .Files.Get "lib/traversal.rego" | nindent 10 }}
      rego: |
        package podlabels
        import data.lib.add_support_labels
        import data.lib.traversal

        iro := input.review.object
        pod := traversal.find_pod(iro)
        support_group := object.get(pod, ["metadata", "labels", "ccloud/support-group"], "none")

        violation[{"msg": add_support_labels.from_k8s_object(iro, msg)}] {
          pod.isFound
          support_group == "none"
          msg := "pod does not have the required label: ccloud/support-group"
        }

        violation[{"msg": add_support_labels.from_k8s_object(iro, msg)}] {
          pod.isFound
          support_group != "none"
          found := { true | support_group == input.parameters.known_support_groups[_] }
          count(found) == 0
          msg := sprintf("pod has an unacceptable label value: ccloud/support-group=%q", [support_group])
        }
