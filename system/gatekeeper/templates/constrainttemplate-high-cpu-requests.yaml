apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: gkhighcpurequests
spec:
  crd:
    spec:
      names:
        kind: GkHighCPURequests
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            maxCpu:
              type: integer

  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package highcpurequests

        canonify_cpu(orig) = new {
          is_number(orig)
          new := orig
        }
        canonify_cpu(orig) = new {
          not is_number(orig)
          not endswith(orig, "m")
          regex.match(`^[0-9]*\.?[0-9]+$`, orig)
          new := to_number(orig)
        }
        canonify_cpu(orig) = new {
          not is_number(orig)
          endswith(orig, "m")
          new := to_number(replace(orig, "m", "")) / 1000
        }

        iro := input.review.object
        iro_support_group := object.get(iro, ["metadata", "labels", "cc/support-group"], "none")
        iro_service := object.get(iro, ["metadata", "labels", "cc/service"], "none")

        cpu_requests = [canonify_cpu(c) | c = iro.spec.containers[_].resources.requests.cpu]

        violation[{"msg": msg}] {
          iro.kind == "Pod"

          total_cpu := sum(cpu_requests)
          total_cpu > input.parameters.maxCpu
          msg := sprintf(
            "support-group=%s,service=%s: requests %v CPU in total",
            [iro_support_group, iro_service, total_cpu]
          )
        }
