# Default values for sentry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
serverReplicaCount: 1
workerReplicaCount: 1

#  SENTRY_FILESTORE_DIR
#
#secretKey: $(docker run --rm sentry config generate-secret-key)
#emailHost:
#serverEmail: '"Sentry" <root@localhost>'
#singleOrganization: false
#githubAppId:
#githubApiSecret:
#useSsl: false
#
#extraEnvVars:
#  e.g.
#  GITHUB_BASE_DOMAIN: github.example.com
#  GITHUB_API_DOMAIN: api.github.example.com
#
# initial user:
# adminEmail:
# adminPassword:
# Generate with: python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex+ uuid.uuid4().hex)
# adminToken:
organizationName: Monsoon
organizationSlug: monsoon

owner-info:
  maintainers:
    - Rajiv Mucheli
    - Olaf Heydorn
  helm-chart-url: https://github.com/sapcc/helm-charts/tree/master/system/sentry

image:
  sentry:
    repository: getsentry/sentry
    tag: 22.7.0
    pullPolicy: IfNotPresent
  snuba:
    repository: getsentry/snuba
    tag: 22.7.0
    pullPolicy: IfNotPresent
  relay:
    repository: getsentry/relay
    tag: 22.7.0
    pullPolicy: IfNotPresent
  symbolicator:
    repository: getsentry/symbolicator
    tag: 0.5.1
    pullPolicy: IfNotPresent

sentry:
  singleOrganization: true
  cleanup:
    successfulJobsHistoryLimit: 5
    failedJobsHistoryLimit: 5
    activeDeadlineSeconds: 100
    concurrencyPolicy: Allow
    enabled: false
    schedule: "0 0 * * *"
    days: 90
  features:
    orgSubdomains: false
    vstsLimitedScopes: true

system:
  ## be sure to include the scheme on the url, for example: "https://sentry.example.com"
  url: ""
  adminEmail: "rajiv.mucheli@sap.com"
  ## This should only be used if you’re installing Sentry behind your company’s firewall.
  public: false
  ## This will generate one for you (it's must be given upon updates)
  # secretKey: "xx"

relay:
  replicas: 1
  mode: managed
  probeFailureThreshold: 5
  probeInitialDelaySeconds: 10
  probePeriodSeconds: 10
  probeSuccessThreshold: 1
  probeTimeoutSeconds: 2
  sidecars: []
  volumes: []

geodata:
  path: ""
  volumeName: ""
  mountPath: ""

snuba:
  api:
    replicas: 1
    # set command to ["snuba","api"] if securityContext.runAsUser > 0
    # see: https://github.com/getsentry/snuba/issues/956
    command: {}
    #   - snuba
    #   - api
    env: []
    probeInitialDelaySeconds: 10
    liveness:
      timeoutSeconds: 2
    readiness:
      timeoutSeconds: 2

  consumer:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"
    # maxBatchSize: ""
    # processes: ""
    # inputBlockSize: ""
    # outputBlockSize: ""
    # maxBatchTimeMs: ""
    # queuedMaxMessagesKbytes: ""
    # queuedMinMessages: ""

    # volumeMounts:
    #   - mountPath: /dev/shm
    #     name: dshm
    # volumes:
    #   - name: dshm
    #     emptyDir:
    #       medium: Memory

  outcomesConsumer:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"
    maxBatchSize: "3"
    # processes: ""
    # inputBlockSize: ""
    # outputBlockSize: ""
    # maxBatchTimeMs: ""
    # queuedMaxMessagesKbytes: ""
    # queuedMinMessages: ""

    # volumeMounts:
    #   - mountPath: /dev/shm
    #     name: dshm
    # volumes:
    #   - name: dshm
    #     emptyDir:
    #       medium: Memory

  replacer:
    replicas: 1
    autoOffsetReset: "earliest"
    maxBatchSize: "3"
    # maxBatchTimeMs: ""
    # queuedMaxMessagesKbytes: ""
    # queuedMinMessages: ""

  subscriptionConsumerEvents:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"

  subscriptionConsumerTransactions:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"

  sessionsConsumer:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"
    # maxBatchSize: ""
    # processes: ""
    # inputBlockSize: ""
    # outputBlockSize: ""
    # maxBatchTimeMs: ""
    # queuedMaxMessagesKbytes: ""
    # queuedMinMessages: ""

    # volumeMounts:
    #   - mountPath: /dev/shm
    #     name: dshm
    # volumes:
    #   - name: dshm
    #     emptyDir:
    #       medium: Memory

  transactionsConsumer:
    replicas: 1
    # tolerations: []
    # podLabels: []
    autoOffsetReset: "earliest"
    # maxBatchSize: ""
    # processes: ""
    # inputBlockSize: ""
    # outputBlockSize: ""
    # maxBatchTimeMs: ""
    # queuedMaxMessagesKbytes: ""
    # queuedMinMessages: ""

    # volumeMounts:
    #   - mountPath: /dev/shm
    #     name: dshm
    # volumes:
    #   - name: dshm
    #     emptyDir:
    #       medium: Memory

  dbInitJob:
    env: []

  migrateJob:
    env: []

  cleanupErrors:
    successfulJobsHistoryLimit: 5
    activeDeadlineSeconds: 100
    concurrencyPolicy: Allow
    enabled: true
    schedule: "0 * * * *"
    sidecars: []
    volumes: []
    serviceAccount: {}

  cleanupTransactions:
    successfulJobsHistoryLimit: 5
    failedJobsHistoryLimit: 5
    activeDeadlineSeconds: 100
    concurrencyPolicy: Allow
    enabled: true
    schedule: "0 * * * *"
    sidecars: []
    volumes: []
    serviceAccount: {}

## This value is only used when redis.enabled is set to false
##
externalRedis:
  ## Hostname or ip address of external redis cluster
  ##
  host: "redis"
  port: 6379
  ## Just omit the password field if your redis cluster doesn't use password
  # password: redis

symbolicator:
  enabled: false
  api:
    replicas: 1
    probeInitialDelaySeconds: 10
    config: |-
      # See: https://getsentry.github.io/symbolicator/#configuration
      cache_dir: "/data"
      bind: "0.0.0.0:3021"
      logging:
        level: "warn"
      metrics:
        statsd: null
        prefix: "symbolicator"
      sentry_dsn: null
      connect_to_reserved_ips: true
      # caches:
      #   downloaded:
      #     max_unused_for: 1w
      #     retry_misses_after: 5m
      #     retry_malformed_after: 5m
      #   derived:
      #     max_unused_for: 1w
      #     retry_misses_after: 5m
      #     retry_malformed_after: 5m
      #   diagnostics:
      #     retention: 1w
  cleanup:
    enabled: false
    # podLabels: []
    # affinity: {}
    # env: []

config:
  # No YAML Extension Config Given
  configYml: {}
  sentryConfPy: |
    # No Python Extension Config Given
  snubaSettingsPy: |
    # No Python Extension Config Given
  relay: |
    # No YAML relay config given

clickhouse:
  enabled: true
  clickhouse:
    imageVersion: "20.8.19.4"
    configmap:
      remote_servers:
        internal_replication: true
        replica:
          backup:
            enabled: false
      zookeeper_servers:
        enabled: true
        config:
          - index: "clickhouse"
            hostTemplate: "{{ .Release.Name }}-zookeeper-clickhouse"
            port: "2181"
      users:
        enabled: false
        user:
          # the first user will be used if enabled
          - name: default
            config:
              password: ""
              networks:
                - ::/0
              profile: default
              quota: default

    persistentVolumeClaim:
      enabled: true
      dataPersistentVolume:
        enabled: true
        accessModes:
          - "ReadWriteOnce"
        storage: "30Gi"

  ## Use this to enable an extra service account
  # serviceAccount:
  #   annotations: {}
  #   enabled: false
  #   name: "sentry-clickhouse"
  #   automountServiceAccountToken: true

## This value is only used when clickhouse.enabled is set to false
##
externalClickhouse:
  ## Hostname or ip address of external clickhouse
  ##
  host: "clickhouse"
  tcpPort: 9000
  httpPort: 8123
  username: default
  password: ""
  database: default
  singleNode: true
  ## Cluster name, can be found in config
  ## (https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-remote-servers)
  ## or by executing `select * from system.clusters`
  ##
  # clusterName: test_shard_localhost

# Settings for Zookeeper.
# See https://github.com/bitnami/charts/tree/master/bitnami/zookeeper
zookeeper:
  enabled: true
  nameOverride: zookeeper-clickhouse
  replicaCount: 3

# Settings for Kafka.
# See https://github.com/bitnami/charts/tree/master/bitnami/kafka
kafka:
  enabled: true
  replicaCount: 3
  allowPlaintextListener: true
  defaultReplicationFactor: 3
  offsetsTopicReplicationFactor: 3
  transactionStateLogReplicationFactor: 3
  transactionStateLogMinIsr: 3
  # 50 MB
  maxMessageBytes: "50000000"
  # 50 MB
  socketRequestMaxBytes: "50000000"

  service:
    ports:
      client: 9092

  ## Use this to enable an extra service account
  # serviceAccount:
  #   create: false
  #   name: kafka

  ## Use this to enable an extra service account
  # zookeeper:
  #   serviceAccount:
  #     create: false
  #     name: zookeeper

## This value is only used when kafka.enabled is set to false
##
externalKafka:
  ## Hostname or ip address of external kafka
  ##
  # host: "kafka-confluent"
  port: 9092

sourcemaps:
  enabled: false

metrics:
  enabled: false

  ## Configure extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1

  ## Metrics exporter resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 100m
  #     memory: 100Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext: {}
  # schedulerName:
  # Optional extra labels for pod, i.e. redis-client: "true"
  # podLabels: []
  service:
    type: ClusterIP
    labels: {}

  image:
    repository: prom/statsd-exporter
    tag: v0.17.0
    pullPolicy: IfNotPresent

  # Enable this if you're using https://github.com/coreos/prometheus-operator
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    namespace: ""
    namespaceSelector: {}
    # Default: scrape .Release.Namespace only
    # To scrape all, use the following:
    # namespaceSelector:
    #   any: true
    scrapeInterval: 30s
    # honorLabels: true

revisionHistoryLimit: 10

# dnsPolicy: "ClusterFirst"
# dnsConfig:
#   nameservers: []
#   searches: []
#   options: []

service:
  name: sentry
  type: ClusterIP
  externalPort: 80
  internalPort: 9000
pruning_time: '0315'

ingress:
  enabled: false
#  host:
#  tls_crt:
#  tls_key:

operator:
  #sentryEndpoint: https://sentry.$region.cloud.sap/api/0/
  enabled: false
  image:
    repository: kube-sentry
    tag: 0.3.0
    pullPolicy: IfNotPresent

postgresql:
  postgresDatabase: sentry
  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 50Gi
  resources:
    requests:
      memory: 10Gi
      cpu: 4

redis:
  # redisPassword:
  persistence:
    enabled: true
    accessMode: ReadWriteMany
    size: 10Gi
  resources:
    requests:
      memory: 10Gi
      cpu: 2

auth:
  register: true

# Deploy Sentry Prometheus alerts.
alerts:
  enabled: true
  # Name of the Prometheus to which the alerts should be assigned to.
  prometheus: openstack

pgmetrics:
  db_name: sentry
  alerts:
    large_database_size_enabled: false

  customMetrics:
    sentry_unresolved_issues:
      query: >
        SELECT o.slug AS organization, p.slug AS project, COUNT(*) FROM sentry_groupedmessage gm
          JOIN sentry_project p ON gm.project_id = p.id
          JOIN sentry_organization o ON p.organization_id = o.id
         WHERE gm.status = 0
         GROUP BY o.slug, p.slug
      metrics:
        - organization: {usage: LABEL, description: "Sentry organization"}
        - project:      {usage: LABEL, description: "Sentry project"}
        - gauge:        {usage: GAUGE, description: "Number of unresolved issues in project"}

    sentry_unresolved_issues_nova:
      query: >
        SELECT o.slug AS organization, p.slug AS project, message, COUNT(*) FROM sentry_groupedmessage gm
          JOIN sentry_project p ON gm.project_id = p.id
          JOIN sentry_organization o ON p.organization_id = o.id
         WHERE gm.status = 0 AND p.slug = 'nova'
         GROUP BY o.slug, p.slug, message
      metrics:
        - organization: {usage: LABEL, description: "Sentry organization"}
        - project:      {usage: LABEL, description: "Sentry project"}
        - message:      {usage: LABEL, description: "Issue message"}
        - gauge:        {usage: GAUGE, description: "Number of unresolved issues in project"}
