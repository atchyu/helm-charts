#!/usr/bin/env python3
from pathlib import Path
from urllib.request import Request, urlopen
from urllib.parse import urlencode
from urllib.error import HTTPError
import os
import ssl
import signal
import sys
import time
import json
import logging
import subprocess

LOG = logging.getLogger(__name__)


def sigterm_handler(_signo, _stack_frame):
    sys.exit(0)


def request(**params):
    apiserver = "https://kubernetes.default.svc"
    serviceaccount_path = Path("/run/secrets/kubernetes.io/serviceaccount")

    with (serviceaccount_path / "namespace").open() as f:
        namespace = f.read()
    with (serviceaccount_path / "token").open() as f:
        token = f.read()

    cacert = serviceaccount_path / "ca.crt"
    context = ssl.create_default_context(cafile=cacert)

    req = Request(url=f"{apiserver}/api/v1/namespaces/{namespace}/configmaps/?{urlencode(params)}")
    LOG.debug(req.full_url)
    req.add_header("Authorization", f"Bearer {token}")
    req.add_header("Accept", "application/json")

    with urlopen(req, context=context) as response:
        for line in response:
            yield json.loads(line)


def process(cm):
    to_execute = []
    for key, data in cm.items():
        p = Path(key)
        with p.open("w") as f:
            f.write(data)
            LOG.debug(f"Written {key}")
        if key[0] != "_" and data.startswith("#!"):
            to_execute.append(key)
    for key in sorted(to_execute):
        LOG.info(f"Executing {key}")
        os.chmod(key, 0o750)
        subprocess.check_call([f"./{key}"], shell=True)
        LOG.info(f"Executed {key}")


def startup(field_selector):
    data = next(request(fieldSelector=field_selector))
    process(data["items"][0]["data"])
    return data["metadata"]["resourceVersion"]


def main():
    if len(sys.argv) < 2:
        LOG.error("Need field-selector as argument")
        return 1
    signal.signal(signal.SIGTERM, sigterm_handler)
    field_selector = sys.argv[1]
    resource_version = startup(field_selector)
    while True:
        try:
            for data in request(fieldSelector=field_selector, watch=1, resourceVersion=resource_version):
                obj = data["object"]
                process(obj["data"])
                resource_version = obj["metadata"]["resourceVersion"]
        except HTTPError:
            time.sleep(1)
            LOG.exception("HTTPError while polling")
        except OSError:
            LOG.exception("OSError whil polling")
    return 0


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    sys.exit(main())
